/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.4.1/userguide/tutorial_java_projects.html
 */

buildscript {
    repositories {
      jcenter()
      maven {
        url "https://plugins.gradle.org/m2/"
      }
    }
    dependencies {
      classpath "gradle.plugin.com.dorongold.plugins:task-tree:1.3"
    }
}
plugins {
    id "cz.malohlava" version "1.0.2"
}
apply plugin: "com.dorongold.task-tree"

project.group = 'fr.esgi.projet.softwareneedsyou'

def CUSTOM_GROUP = 'Custom' //tasks ... on console

// pour le projet actuel et les projets en dépendance
allprojects {
    configure(taskTree) {
        group = CUSTOM_GROUP
        description 'Affiche l\'arbre des dépendances de la commande qui suit'
    }
}

// pour tous les projets en dépendance
subprojects {
    // Apply the java plugin to add support for Java
    apply plugin: 'java'

    // Support des IDEs
    //apply plugin: 'eclipse'
    //tasks.eclipse.dependsOn cleanEclipse
    //tasks.eclipseClasspath.dependsOn initProject
    //apply plugin: 'idea'
    /*idea {
        project {
            jdkName = jdkLevel
            languageLevel = jdkLevel
        }
    }*/

    // Plugins de test
    apply plugin: 'findbugs'
    apply plugin: 'jacoco'

    //manifest.mainAttributes(provider: 'gradle')
    //appendix = archiveName
    //archivesBaseName = "softwareneedsyou"

    // On spécifie la version de Java à utiliser
    sourceCompatibility = JavaVersion.VERSION_1_8 //1.8
    targetCompatibility = JavaVersion.VERSION_1_8 //1.8
    
    tasks.withType(JavaCompile) {
        //targetCompatibility = jdkLevel
        //sourceCompatibility = jdkLevel
        options.encoding = 'UTF-8'
    }

    // In this section you declare where to find the dependencies of your project
    repositories {
        // Use jcenter for resolving your dependencies.
        jcenter()
        // You can declare any Maven/Ivy/file repository here.
        //mavenCentral()
    }

    ext {
        docDir = "${rootProject.projectDir}/docs/${project.name}"

        //General
        lombockVersion = '1.16.+'

        //Logging
        // ...

        //Testing
        junitVersion = '4.+'
    }

    dependencies {
        // This dependency is found on compile classpath of this component and consumers.
        //compile 'com.google.guava:guava:20.0'

        // Use JUnit test framework
        testCompile "junit:junit:$junitVersion"
        
        compileOnly "org.projectlombok:lombok:$lombockVersion"
        //compile 'com.google.code.findbugs:annotations:3.0.1'
    }

    jar {
        manifest {
            attributes 'Implementation-Title': project.name,
                'Implementation-Version': "$version"
        }
    }

    test {
        afterTest { desc, result ->
            if(result.resultType  == TestResult.ResultType.FAILURE) {
                logger.quiet("${result.resultType} : ${desc.name}(${desc.className}) -> ${result.exception.message}" )
            }
        }
    }

    task testsJar(type: Jar, dependsOn: testClasses) {
        group BasePlugin.BUILD_GROUP
        description = 'Assembles a jar archive containing the test classes.'
        classifier = 'tests'
        //from sourceSets.test.classes
        from sourceSets.test.output
    }

    task sourcesTestJar(type: Jar /*, dependsOn: testClasses*/) {
        group = CUSTOM_GROUP
        description = 'Assembles a jar archive containing the test source classes.'
        classifier = 'test-sources'
        from sourceSets.test.allSource
    }

    task sourcesJar(type: Jar /*, dependsOn: classes*/) {
        group = CUSTOM_GROUP
        description = 'Assembles a jar archive containing the main source classes.'
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task listJars {
        group CUSTOM_GROUP
        description 'Liste tout les jars attachés à la config de compilation.'
        doLast {
            configurations.compile.each { File file -> println file.name }
        }
    }

    task javadocClean(type: Delete) {
        group 'documentation'
        description 'Deletes the (java)doc directory.'
        delete docDir + "/javadoc"
        //followSymlinks = true
    }
    javadoc.dependsOn javadocClean

    javadoc.destinationDir = file(docDir + "/javadoc")
    //${projectDir}/docs/javadoc

    task testJavadocClean(type: Delete) {
        group 'documentation'
        description 'Deletes the test (java)doc directory.'
        delete docDir + "/testjavadoc"
        //followSymlinks = true
    }

    // creating javadoc task for test code
    task testJavadoc(type: Javadoc, dependsOn: testJavadocClean) {
        group 'documentation'
        description 'Generates Javadoc API documentation for the test source code.'
        source = sourceSets.test.allJava
        classpath = sourceSets.test.compileClasspath
        // if not changed the destinationDir, the javadoc for production code is overridden.
        destinationDir = file(docDir + "/testjavadoc")
        //options.linkSource true
        //options.links("http://docs.oracle.com/javase/8/docs/api/")
        //failOnError false
    }
    
    task javadocJar(type: Jar, dependsOn: javadoc) {
        group 'documentation'
        description 'Assembles a jar archive containing the main javadoc.'
        classifier 'javadoc'
        from javadoc.destinationDir
    }

    task testJavadocJar(type: Jar, dependsOn: testJavadoc) {
        group 'documentation'
        description 'Assembles a jar archive containing the test javadoc.'
        classifier 'test-javadoc'
        from testJavadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
        archives testsJar
        archives sourcesTestJar
        archives testJavadocJar
    }

    task release {
        group CUSTOM_GROUP
        description 'fige une version avant son déploiement'
    }
 
    gradle.taskGraph.whenReady {taskGraph ->
        if (taskGraph.hasTask(release)) {
            version = version
        } else {
            version += "-SNAPSHOT"
        }
    }

    findbugs {
        toolVersion = "3.0.1" //pour compactibilité jre 1.7
        effort = "max"
        reportLevel = "low"
        ignoreFailures = true //sinon echec de la compilation
        reportsDir = file("${buildDir}/findbugsReports") //$project.buildDir, default=build/reports/findbugs/
    }

    tasks.withType(FindBugs) {
        group = 'Reporting'
        reports {
            xml.enabled = false
            html.enabled = true
        }
    }

    build.finalizedBy(jacocoTestReport) //pour exécuter automatique le test de couverture (avec junit) après la compilation

    jacocoTestReport {
        group = "Reporting"
        description = "Générer un rapport de couverture de code (JAvaCOdeCOverage) après les tests"
        additionalSourceDirs = files(sourceSets.main.allJava.srcDirs)
        reports {
            xml.enabled false
            csv.enabled false
            html.enabled true
            html.destination "${buildDir}/jacocoHtml"
        }
        doFirst {
            sourceDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/tri/**Exception**'])
            })
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/tri/**Exception**'])
            })
        }
        afterEvaluate { //pas vraiment nécessaire avec doFirst
            classDirectories = files(classDirectories.files.collect {
                fileTree(dir: it, exclude: ['**/tri/**Exception**'])
            })
        }
    }

    task prepareGit {
        group = CUSTOM_GROUP //BasePlugin.BUILD_GROUP // Or use 'build'
        description = 'Prépare le dépôt git avant commit'
        dependsOn javadoc
        dependsOn testJavadoc
    }
}
